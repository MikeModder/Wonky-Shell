# Go
# Build your Go application.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/go

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go get -u github.com/JoshuaDoes/govvv
    go get -u github.com/c-bata/go-prompt
    go get -u github.com/mattn/go-tty
    go get -u github.com/mattn/go-colorable
    go get -u github.com/logrusorgru/aurora
    echo win32
    GOOS=windows GOARCH=amd64 govvv build -o out/Wonky-Shell-win32.exe
    echo win64
    GOOS=windows GOARCH=386   govvv build -o out/Wonky-Shell-win64.exe
    echo mac64
    GOOS=darwin  GOARCH=amd64 govvv build -o out/Wonky-Shell-mac64
    echo linux64
    GOOS=linux   GOARCH=amd64 govvv build -o out/Wonky-Shell-lin64
    echo linux32
    GOOS=linux   GOARCH=386   govvv build -o out/Wonky-Shell-lin32
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'
